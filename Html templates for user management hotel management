
Creating HTML templates for a user management system for a hotel management project involves several key pages. Here's a basic outline for key templates:
1-Login Page (login.html): For users to log into the system.
2-Dashboard Page (dashboard.html): The main page where users can see various options like managing rooms, bookings, or users.
3-User List Page (user-list.html): Displays the list of users (admin and guests) with options to add, update, or delete users.
4-Add User Page (add-user.html): Form to add a new user (admin, guest).
5-Edit User Page (edit-user.html): Form to update existing user details.
6-Room Management Page (rooms.html): Manage hotel rooms (view, add, or modify room details).

1. Login Page (login.html)

   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hotel Management - Login</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="login-container">
        <h2>Hotel Management System - Login</h2>
        <form action="/login" method="POST">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>

            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>

            <button type="submit">Login</button>
        </form>
        <p>Don't have an account? <a href="/register">Register here</a></p>
    </div>
</body>
</html>
                        2. Registration Page (register.html)

                             <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hotel Management - Register</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="register-container">
        <h2>Create a New Account</h2>
        <form action="/register" method="POST">
            <label for="fullName">Full Name:</label>
            <input type="text" id="fullName" name="fullName" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>

            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>

            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>

            <button type="submit">Register</button>
        </form>
        <p>Already have an account? <a href="/login">Login here</a></p>
    </div>
</body>
</html>
                              3. User Profile Page (profile.html)

                                      <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="profile-container">
        <h2>Your Profile</h2>
        <form action="/updateProfile" method="POST">
            <label for="fullName">Full Name:</label>
            <input type="text" id="fullName" name="fullName" value="John Doe" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" value="johndoe@example.com" required>

            <label for="username">Username:</label>
            <input type="text" id="username" name="username" value="johnDoe123" required>

            <button type="submit">Update Profile</button>
        </form>
        <button onclick="window.location.href='/logout'">Logout</button>
    </div>
</body>
</html>
                            4. Admin User Management Page (admin-users.html)
                                This template will be used by the hotel management admin to view, update, and delete user accounts.

                                        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - Admin</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="admin-container">
        <h2>User Management</h2>
        <table>
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Username</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Example of dynamic user data -->
                <tr>
                    <td>1</td>
                    <td>John Doe</td>
                    <td>johndoe@example.com</td>
                    <td>johnDoe123</td>
                    <td>
                        <button onclick="window.location.href='/editUser/1'">Edit</button>
                        <button onclick="window.location.href='/deleteUser/1'">Delete</button>
                    </td>
                </tr>
                <!-- More users can be added dynamically here -->
            </tbody>
        </table>
        <button onclick="window.location.href='/addUser'">Add New User</button>
    </div>
</body>
</html>


                                   5. Add User Page (add-user.html)


                                        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New User</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="add-user-container">
        <h2>Add New User</h2>
        <form action="/addUser" method="POST">
            <label for="fullName">Full Name:</label>
            <input type="text" id="fullName" name="fullName" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>

            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>

            <label for="role">Role:</label>
            <select id="role" name="role">
                <option value="user">User</option>
                <option value="admin">Admin</option>
            </select>

            <button type="submit">Add User</button>
        </form>
    </div>
</body>
</html>
                                           6. CSS (styles.css)
                                              To make the pages look clean and user-friendly, you can use some basic CSS styling.

                                                body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

h2 {
    text-align: center;
    color: #333;
}

form {
    width: 50%;
    margin: 0 auto;
    background-color: white;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

input, select, button {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ddd;
    border-radius: 5px;
}

button {
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

a {
    color: #333;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

table {
    width: 80%;
    margin: 20px auto;
    border-collapse: collapse;
    border: 1px solid #ddd;
}

th, td {
    padding: 10px;
    text-align: center;
    border: 1px solid #ddd;
}

th {
    background-color: #f2f2f2;
}

button {
    margin: 5px;
}
                                     Java Backend (Spring Boot Example)
The HTML templates above can be served by a Java backend such as Spring Boot. You can use Thymeleaf as a template engine to dynamically inject content into the HTML files (like user information and actions). You will also need controllers in Java to handle user actions like login, registration, and user management.

For example:
       @Controller
public class UserController {

    @GetMapping("/login")
    public String loginPage() {
        return "login";  // Login page will be rendered
    }

    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        // Validate credentials and redirect to user dashboard
        return "redirect:/dashboard";
    }

    @GetMapping("/register")
    public String registerPage() {
        return "register";  // Registration page will be rendered
    }

    @PostMapping("/register")
    public String register(@RequestParam String username, @RequestParam String password) {
        // Register user and redirect
        return "redirect:/login";
    }

    // Similar methods for profile, user management, etc.
}

